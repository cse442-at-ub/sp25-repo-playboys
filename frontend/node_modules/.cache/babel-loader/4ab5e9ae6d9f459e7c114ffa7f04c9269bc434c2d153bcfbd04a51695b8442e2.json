{"ast":null,"code":"// Send email\nexport const send_forgot_pwd_email=async email=>{console.log(\"in send_forgot_pwd_email!\");const response=await fetch(\"../send_forgot_pwd_email.php\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({email})});const data=await response.json();if(!response.ok)throw new Error(\"Failed to send reset email\");return data.message;};// Verify code\nexport const verifyResetToken=async code=>{const response=await fetch(`${process.env.REACT_APP_API_URL}src/login_screens/forgot/verify_forgot_pwd_code.php`,{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({code})});const data=await response.json();if(!response.ok)throw new Error(data.error||\"Invalid, incorrect, or expired code\");return true;};// Reset password\nexport const resetPassword=async(password,confirm_password)=>{const response=await fetch(`${process.env.REACT_APP_API_URL}src/login_screens/forgot/reset_forgotten_pwd.php`,{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({password,confirm_password})});const data=await response.json();if(!response.ok)throw new Error(data.error||\"Failed to reset password\");return data.message;// Success message\n};","map":{"version":3,"names":["send_forgot_pwd_email","email","console","log","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","message","verifyResetToken","code","process","env","REACT_APP_API_URL","error","resetPassword","password","confirm_password"],"sources":["/Users/camdenbartlo/UB/Sem 4/CSE 442/sp25-repo-playboys/frontend/src/login_screens/forgot/api/forgot_pwd_apis.ts"],"sourcesContent":["// Send email\nexport const send_forgot_pwd_email = async ( email: string ): Promise<string> => \n{\n  console.log(\"in send_forgot_pwd_email!\");\n  const response = await fetch(\"../send_forgot_pwd_email.php\", {\n    method: \"POST\",\n    headers: { \n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ email }),\n  });\n\n  const data = await response.json();\n  if (!response.ok) \n    throw new Error( \"Failed to send reset email\" );\n  return data.message; \n};\n\n// Verify code\nexport const verifyResetToken = async (code: string): Promise<boolean> => \n{\n  const response = await fetch(`${process.env.REACT_APP_API_URL}src/login_screens/forgot/verify_forgot_pwd_code.php`, {\n    method: \"POST\",\n    headers: { \n      \"Content-Type\": \"application/json\", \n    },\n    body: JSON.stringify({ code }),\n  });\n\n  const data = await response.json();\n  if ( !response.ok ) \n    throw new Error( data.error || \"Invalid, incorrect, or expired code\" );\n  return true; \n};\n\n// Reset password\nexport const resetPassword = async (password: string, confirm_password: string): Promise<string> => \n{\n  const response = await fetch(`${process.env.REACT_APP_API_URL}src/login_screens/forgot/reset_forgotten_pwd.php`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ password, confirm_password }),\n  });\n\n  const data = await response.json();\n  if ( !response.ok ) throw new Error( data.error || \"Failed to reset password\" );\n  return data.message; // Success message\n};"],"mappings":"AAAA;AACA,MAAO,MAAM,CAAAA,qBAAqB,CAAG,KAAQ,CAAAC,KAAa,EAC1D,CACEC,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC,CACxC,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,8BAA8B,CAAE,CAC3DC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAET,KAAM,CAAC,CAChC,CAAC,CAAC,CAEF,KAAM,CAAAU,IAAI,CAAG,KAAM,CAAAP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAClC,GAAI,CAACR,QAAQ,CAACS,EAAE,CACd,KAAM,IAAI,CAAAC,KAAK,CAAE,4BAA6B,CAAC,CACjD,MAAO,CAAAH,IAAI,CAACI,OAAO,CACrB,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,gBAAgB,CAAG,KAAO,CAAAC,IAAY,EACnD,CACE,KAAM,CAAAb,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAGa,OAAO,CAACC,GAAG,CAACC,iBAAiB,qDAAqD,CAAE,CAClHd,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAEO,IAAK,CAAC,CAC/B,CAAC,CAAC,CAEF,KAAM,CAAAN,IAAI,CAAG,KAAM,CAAAP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAClC,GAAK,CAACR,QAAQ,CAACS,EAAE,CACf,KAAM,IAAI,CAAAC,KAAK,CAAEH,IAAI,CAACU,KAAK,EAAI,qCAAsC,CAAC,CACxE,MAAO,KAAI,CACb,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,aAAa,CAAG,KAAAA,CAAOC,QAAgB,CAAEC,gBAAwB,GAC9E,CACE,KAAM,CAAApB,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAGa,OAAO,CAACC,GAAG,CAACC,iBAAiB,kDAAkD,CAAE,CAC/Gd,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAEa,QAAQ,CAAEC,gBAAiB,CAAC,CACrD,CAAC,CAAC,CAEF,KAAM,CAAAb,IAAI,CAAG,KAAM,CAAAP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAClC,GAAK,CAACR,QAAQ,CAACS,EAAE,CAAG,KAAM,IAAI,CAAAC,KAAK,CAAEH,IAAI,CAACU,KAAK,EAAI,0BAA2B,CAAC,CAC/E,MAAO,CAAAV,IAAI,CAACI,OAAO,CAAE;AACvB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}